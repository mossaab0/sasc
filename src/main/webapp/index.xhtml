<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:c="http://java.sun.com/jsp/jstl/core"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets">
    <h:head>
        <title>Search in Secrets</title>
        <script src="resources/jquery.easing.js" type="text/javascript"></script>
        <script src="resources/jqueryFileTree.js" type="text/javascript"></script>
        <link href="resources/jqueryFileTree.css" rel="stylesheet" type="text/css" media="screen" />
        <style>
            .ui-widget {font-size: 1em !important}
            .ui-menu .ui-menu-parent .ui-menu-child {white-space:nowrap; width: auto}
            .ui-menubar .ui-menu-child .ui-menuitem-link {width: 100%}
            .ui-layout-north {
                z-index:20 !important;
                overflow:visible !important;
            }

            .ui-layout-north .ui-layout-unit-content {
                overflow:visible !important;
            }

            .ui-fileupload-content {
                display: none;
            }

            .ui-fileupload-buttonbar {
                padding: 0 !important;
                width: auto !important;
            }

            .ui-fileupload-choose {
                margin: 0 !important;
            }

            .ui-fileupload {
                float: left !important;
            }

            .ui-fileupload-buttonbar {
                margin: 0 !important;
            }

            .ui-button-text-only .ui-button-text {
                padding: 0.3em;
            }

            .ui-button {
                margin: 0;
            }

            .inactive {
                background: #c4c4c4 -webkit-gradient(linear,left top,left bottom,from(rgba(255,255,255,0.8)),to(rgba(255,255,255,0))) !important;
                border: 1px solid #a8a8a8 !important;
            }

            .protect {
                background: #00ff7f -webkit-gradient(linear,left top,left bottom,from(rgba(255,255,255,0.8)),to(rgba(255,255,255,0))) !important;
                border: 1px solid #a8a8a8 !important;
            }

            .release {
                background: #f08080 -webkit-gradient(linear,left top,left bottom,from(rgba(255,255,255,0.8)),to(rgba(255,255,255,0))) !important;
                border: 1px solid #a8a8a8 !important;
            }

            .email {
                margin-right: 5px;
            }

            .ui-widget-content .ui-state-highlight .email {
                color: #fff;
            }
        </style>
    </h:head>
    <h:body>
        <p:growl id="growl"/>
        <p:ajaxStatus onstart="startHandler()" oncomplete="endHandler()"/>  
        <script>
            var ajaxInProgress;
            function startHandler() {
                ajaxInProgress = setTimeout(function () {
                    PF('statusDialog').show();
                }, 200);
            }
            function endHandler() {
                clearTimeout(ajaxInProgress);
                PF('statusDialog').hide();
                ajaxInProgress = null;
            }
            function showBrowser() {
                $('#browser').
                        fileTree({root: '/', script: 'jqueryFileTree.jsp'},
                                function (file) {
                                    $('#selected').val(file);
                                    PF('selectedPanel').show();
                                });
                PF('browserDialog').show();
            }
        </script>
        <p:dialog modal="true" widgetVar="statusDialog" showHeader="false" draggable="false" closable="false" resizable="false">
            <p:graphicImage url="resources/ajax-loader.gif" />
        </p:dialog>
        <p:dialog header="Select .mbox file" widgetVar="browserDialog" modal="true" height="400px" width="600px">
            <p:panel widgetVar="selectedPanel" visible="false">
                <h:form prependId="false">
                    <p:inputText id="selected" value="#{applicationBean.mboxPath}" placeholder="Mbox path"/>
                    <p:commandButton value="Index" onclick="PF('browserDialog').hide(); PF('progressPanel').show(); PF('pbAjax').start();" global="false" update="center body">
                        <f:actionListener binding="#{applicationBean.indexMbox()}"/>
                        <f:actionListener binding="#{lazyView.submit()}"/>
                    </p:commandButton>
                    <p:commandButton value="Cancel" type="button" onclick="PF('browserDialog').hide()"/>
                </h:form>
            </p:panel>
            <p:separator/>
            <div id="browser"/>
        </p:dialog>
        <p:dialog widgetVar="helpDialog" header="Help" modal="true" width="50%" fitViewport="true">
            <h3>Purpose</h3>
            <ul>
                <li>
                    This application allows you to label messages in your
                    personal email collection in order to protect content
                    that you do not wish to be seen by others.
                </li>
                <li>
                    You will use labels on emails you know to be private to
                    automatically train a classifier (an automatic learning
                    program) to detect other messages in your email collection
                    that might contain sensitive content. The classifier finds
                    patterns in the messages to which you assigned labels, and
                    then finds other emails which fit those patterns.
                    For example, maybe you labeled several emails from Sally
                    about “surprise party” as sensitive, so other emails from
                    Sally with those words might be sensitive too.
                </li>
            </ul>
            <h3>Logistics</h3>
            <ul>
                <li>
                    The first step is to prepare your email collection by
                    building an index. This version of the system requires email
                    collections to be in “mbox” format.  If you have a gmail
                    account you can download all of your messages in mbox format
                    from
                    <a href="https://takeout.google.com/settings/takeout" target="_blank">here</a>).
                </li>
                <li>
                    After you have indexed your email collection,
                    the index option in the Collection menu will be disabled.
                </li>
            </ul>
            <h3>Manually Labeling Emails</h3>
            <ul>
                <li>
                    A “general” sensitivity type is predefined. If you prefer to
                    mark emails simply “sensitive” or “not sensitive”, you can
                    just start labeling messages.
                </li>
                <li>
                    If you’ve like to get more specific, you can define your own
                    labels for sensitive content (e.g., “financial” or “family”)
                    using the Model menu.  
                </li>
                <li>
                    To find messages to label, do a word-based search.  For
                    example, you could search for “birthday” to find messages
                    about birthday parties. The results that best match your
                    query will be listed first. 
                </li>
                <li>
                    If only the messages about surprise parties are sensitive,
                    you should click on the “Protect” button for those and on
                    the “Release” button for the others.  
                </li>
                <li>
                    It is important that you label some messages “Protect” and
                    some messages “Release” so that the classifier can learn the
                    differences between those two types of messages.  
                </li>
                <li>
                    Any labels you assign are saved immediately, so they won’t
                    be lost if you stop for a while and come back to this later.
                    When you return, just use the Corpus menu to see the labels
                    you have already assigned.
                </li>
            </ul>
            <h3>Help For Manually Finding Sensitive Emails</h3>
            <ul>
                <li>
                    We have included preset queries for topics that we
                    anticipate many people find sensitive. This list was
                    originally developed by the ePADD project at Stanford
                    University (and is therefore referred to as the ePadd word
                    list).
                </li>
            </ul>
            <h3>Training the Classifier </h3>
            <ul>
                <li>
                    Once you have labeled some messages you can use the Model
                    menu to train a classifier based on your labels.
                </li>
                <li>
                    From the Model menu, you can also save (“export”) a
                    classifier for use by another program, or load a classifier
                    that you have previously saved. 
                </li>
                <li>
                    Once you have trained or loaded a pretrained classifier, you
                    can use the classifier to find more emails to label.  One
                    way to do this is to run the classifier; it will find new
                    documents that are like the ones you chose to protect.  
                </li>
                <li>
                    Alternatively, you can use a process called “active learning”
                    to have the model suggest one document at a time for you to
                    label.  In this case, the documents presented will not be
                    those most likely to require protection, but rather those
                    about which the classifier is most uncertain.  Once you have
                    a good classifier, this is a way to quickly make it even better.   
                </li>
                <li>
                    Finally, you can estimate the quality of your classifier.
                    We do this by training with most of the labels you assigned
                    while reserving a few manually-labeled messages. We then see
                    how well the classifier can predict the way you labeled
                    those reserved messages.
                </li>
                <li>
                    If you have questions, you can send email to oard@umd.edu.
                </li>
            </ul>
        </p:dialog>
        <p:dialog showHeader="false" widgetVar="progressPanel" modal="true" height="21px" width="600px" resizable="false" draggable="false">
            <p:progressBar widgetVar="pbAjax" ajax="true" value="#{applicationBean.progress}" labelTemplate="{value}%" styleClass="animated" global="false">
                <p:ajax event="complete" update="growl menubar tableform body" oncomplete="PF('progressPanel').hide()"/>
            </p:progressBar>
        </p:dialog>
        <p:dialog header="Cross Validation Effectiveness" widgetVar="cvDialog" dynamic="true" resizable="false">
            <h:outputText value="#{applicationBean.crossValidation}"/>
        </p:dialog>
        <p:dialog id="themeDialog" header="New Sensitivity Type" widgetVar="themeDialog" dynamic="true" resizable="false">
            <h:form prependId="false">
                <p:inputText id="themeName" widgetVar="themeName" value="#{applicationBean.themeReplacement}" placeholder="Theme Name" validatorMessage="Please enter only alphanumerical characters or spaces">
                    <f:validateRegex pattern="^[0-9a-zA-Z]+[0-9a-zA-Z ]*$"/>
                </p:inputText>
                <p:commandButton value="Create" update="tableform body growl menubar" oncomplete="$('#themeName').val(''); PF('themeDialog').hide()">
                    <f:actionListener binding="#{applicationBean.newAnnotations()}"/>
                    <f:actionListener binding="#{lazyView.submit()}"/>
                </p:commandButton>
            </h:form>
        </p:dialog>
        <p:layout fullPage="true">
            <p:layoutUnit position="north" size="310">
                <h:form prependId="false">  
                    <p:growl id="messages"/>
                    <p:menubar id="menubar">
                        <p:submenu label="Collection">
                            <p:menuitem value="Index Mbox" onclick="showBrowser()" disabled="#{!applicationBean.indexingEnabled || applicationBean.indexExists}"/>
                            <p:menuitem value="Review Annotations" actionListener="#{lazyView.submit}" update="tableform body" rendered="#{applicationBean.indexExists}"/>
                        </p:submenu>
                        <p:submenu label="Model" rendered="#{applicationBean.indexExists}">
                            <p:menuitem value="New Sensitivity Type" onclick="PF('themeDialog').show()"/>
                            <p:submenu label="Load Sensitivity Type" rendered="#{!applicationBean.themes.isEmpty()}">
                                <c:forEach var="theme" items="#{applicationBean.themes}">
                                    <p:menuitem value="#{theme}" update="tableform body menubar">
                                        <f:actionListener binding="#{applicationBean.loadAnnotations(theme)}"/>
                                        <f:actionListener binding="#{lazyView.submit()}"/>
                                    </p:menuitem>
                                </c:forEach>
                            </p:submenu>
                            <p:menuitem value="Train" actionListener="#{applicationBean.train}" disabled="#{!applicationBean.trainingEnabled}" update="menubar"/>
                            <p:menuitem value="Predict" actionListener="#{lazyView.predict}" onclick="PF('progressPanel').show(); PF('pbAjax').start();" update="tableform body" disabled="#{!applicationBean.predictionEnabled}" global="false"/>
                            <p:menuitem value="Active Learning" actionListener="#{lazyView.activeLearning}" onclick="PF('progressPanel').show(); PF('pbAjax').start();" update="tableform body" global="false"/>
                            <p:menuitem value="Export" ajax="false" disabled="#{!applicationBean.predictionEnabled}">
                                <p:fileDownload value="#{applicationBean.file}" />
                            </p:menuitem>
                            <p:menuitem value="Cross Validation" onclick="PF('cvDialog').show()"/>
                        </p:submenu>
                        <p:submenu label="ePadd Word List" rendered="#{applicationBean.indexExists}">
                            <c:forEach var="lexicon" items="#{applicationBean.lexicons}">
                                <p:submenu label="#{lexicon.key}">
                                    <c:forEach var="list" items="#{lexicon.value}">
                                        <p:menuitem value="#{list.key}" title="#{list.value}" actionListener="#{lazyView.filter(list.value)}" update="tableform body"/>
                                    </c:forEach>
                                </p:submenu>
                            </c:forEach>
                        </p:submenu>
                        <p:menuitem value="Help" onclick="PF('helpDialog').show()"/>
                        <f:facet name="options">
                            <h:outputText value="Sensitivity Type: #{applicationBean.theme}" style="float: left; padding: .3em 1em; font-weight: bold" rendered="#{applicationBean.indexExists}"/>
                            <p:fileUpload fileUploadListener="#{applicationBean.uploadModel}" auto="true" label="Import Model" update="messages menubar" rendered="#{applicationBean.indexExists}"/>
                            <p:inputText value="#{lazyView.query}" placeholder="Search" rendered="#{applicationBean.indexExists}"/>
                            <p:commandButton icon="ui-icon-search" actionListener="#{lazyView.submit}" update="tableform body" rendered="#{applicationBean.indexExists}"/>
                        </f:facet>
                    </p:menubar>
                </h:form>
                <h:form id="tableform">
                    <p:dataTable var="email" value="#{lazyView.lazyModel}" paginator="true" rows="10" paginatorPosition="bottom"
                                 paginatorTemplate="{RowsPerPageDropdown} {FirstPageLink} {PreviousPageLink} {CurrentPageReport} {NextPageLink} {LastPageLink}"
                                 rowsPerPageTemplate="10,25,100" selectionMode="single" selection="#{lazyView.selectedEmail}" id="emailTable" lazy="true"
                                 scrollable="true" scrollHeight="200" rendered="#{applicationBean.indexExists}">
                        <p:ajax event="rowSelect" listener="#{lazyView.onRowSelect}" update="body"/>
                        <p:column headerText="Assessment" style="width: 132px; padding: 0; font-size: 0.95em">
                            <p:selectBooleanButton value="#{email.protect}" onLabel="Protect" offLabel="Protect" styleClass="#{email.protectStyleClass}">
                                <p:ajax update="growl tableform body" listener="#{lazyView.updateAnnotations(email)}" />
                            </p:selectBooleanButton>
                            <p:selectBooleanButton value="#{email.release}" onLabel="Release" offLabel="Release" styleClass="#{email.releaseStyleClass}">
                                <p:ajax update="growl tableform body" listener="#{lazyView.updateAnnotations(email)}" />
                            </p:selectBooleanButton>
                        </p:column>
                        <p:column headerText="Score" sortBy="#{email.score}" width="10%">
                            <h:outputText value="#{email.score}"/>
                        </p:column>
                        <p:column headerText="From" sortBy="#{email.from}" width="20%">
                            <h:outputText value="#{email.from.left}" title="#{email.from.right}" styleClass="email"/>
                        </p:column>
                        <p:column headerText="Subject" sortBy="#{email.subject}" width="50%">
                            <h:outputText value="#{email.subject}"/>
                        </p:column>
                        <p:column headerText="Date" sortBy="#{email.date}" width="20%">
                            <h:outputText value="#{email.date}"/>
                        </p:column>
                    </p:dataTable>
                </h:form>
            </p:layoutUnit>
            <p:layoutUnit position="center" id="center">
                <h:panelGroup id="body" rendered="#{applicationBean.indexExists}">
                    <h:outputText value="To: " rendered="#{lazyView.selectedEmail.to.size()>0}" style="font-weight: bold"/>
                    <ui:repeat var="address" value="#{lazyView.selectedEmail.to}">
                        <p:commandLink value="#{address.left}" title="#{address.right}"
                                       actionListener="#{lazyView.searchEmail(address.left, address.left)}"
                                       update="tableform body" styleClass="email"/>
                    </ui:repeat>

                    <h:outputText value="Cc: " rendered="#{lazyView.selectedEmail.cc.size()>0}" style="font-weight: bold"/>
                    <ui:repeat var="address" value="#{lazyView.selectedEmail.cc}">
                        <p:commandLink value="#{address.left}" title="#{address.right}"
                                       actionListener="#{lazyView.searchEmail(address.left, address.left)}"
                                       update="tableform body" styleClass="email"/>
                    </ui:repeat>

                    <h:outputText value="Bcc: " rendered="#{lazyView.selectedEmail.bcc.size()>0}" style="font-weight: bold"/>
                    <ui:repeat var="address" value="#{lazyView.selectedEmail.bcc}">
                        <p:commandLink value="#{address.left}" title="#{address.right}"
                                       actionListener="#{lazyView.searchEmail(address.left, address.left)}"
                                       update="tableform body" styleClass="email"/>
                    </ui:repeat>
                    <p:separator rendered="#{lazyView.selectedEmail.to.size()>0 || lazyView.selectedEmail.cc.size()>0 || lazyView.selectedEmail.bcc.size()>0}"/>

                    <h:form>
                        <h:outputText value="Files: " rendered="#{lazyView.selectedEmail.files.size()>0}" style="font-weight: bold"/>
                        <ui:repeat var="file" value="#{lazyView.selectedEmail.files}">
                            <p:commandLink value="#{file.name}" title="#{file.size}" styleClass="email" ajax="false">
                                <p:fileDownload value="#{file.download}"/>
                            </p:commandLink>
                        </ui:repeat>
                    </h:form>
                    <p:separator rendered="#{lazyView.selectedEmail.files.size()>0}"/>

                    <h:outputText value="#{lazyView.selectedEmail.html}" rendered="#{lazyView.selectedEmail.html != null}" escape="false"/>
                    <h:outputText style="white-space: pre-wrap" value="#{lazyView.selectedEmail.body}" rendered="#{lazyView.selectedEmail.html == null}"/>
                </h:panelGroup>
            </p:layoutUnit>
        </p:layout>
    </h:body>
</html>
